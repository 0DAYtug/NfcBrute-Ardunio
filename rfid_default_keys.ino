#include <SPI.h>
#include <MFRC522.h>

#define RST_PIN         9           // Configurable, see typical pin layout above
#define SS_PIN          10          // Configurable, see typical pin layout above

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.

// Number of known default keys (hard-coded)
// NOTE: Synchronize the NR_KNOWN_KEYS define with the defaultKeys[] array
#define NR_KNOWN_KEYS   94

// Known keys, see: https://code.google.com/p/mfcuk/wiki/MifareClassicDefaultKeys
// Added (Extra) Keys see : https://raw.githubusercontent.com/eybisi/misc/main/abc.keys

byte knownKeys[NR_KNOWN_KEYS][MFRC522::MF_KEY_SIZE] =  { 
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // FF FF FF FF FF FF = factory default
    {0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5}, // A0 A1 A2 A3 A4 A5
    {0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5}, // B0 B1 B2 B3 B4 B5
    {0x4d, 0x3a, 0x99, 0xc3, 0x51, 0xdd}, // 4D 3A 99 C3 51 DD
    {0x1a, 0x98, 0x2c, 0x7e, 0x45, 0x9a}, // 1A 98 2C 7E 45 9A
    {0xd3, 0xf7, 0xd3, 0xf7, 0xd3, 0xf7}, // D3 F7 D3 F7 D3 F7
    {0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff}, // AA BB CC DD EE FF
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 00 00 00 00 00 00
    {0xe9, 0x02, 0x39, 0x5c, 0x17, 0x44},  // E9 02 39 5C 17 44
    {0xab, 0xba, 0x12, 0x34, 0xfc, 0xb0},  // AB BA 12 34 FC B0
    {0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6},  // F1 F2 F3 F4 F5 F6
    {0x40, 0x51, 0xa8, 0x5e, 0x7f, 0x2d},  // 40 51 A8 5E 7F 2D
    {0x73, 0x57, 0xeb, 0xd4, 0x83, 0xcc},  // 73 57 EB D4 83 CC
    {0xd8, 0xba, 0x1a, 0xa9, 0xab, 0xa0},  // D8 BA 1A A9 AB A0
    {0x76, 0x93, 0x9d, 0xdd, 0x9e, 0x97},  // 76 93 9D DD 9E 97
    {0x3b, 0xf3, 0x91, 0x81, 0x5a, 0x8d},  // 3B F3 91 81 5A 8D
    {0x7c, 0x87, 0x01, 0x3a, 0x64, 0x8a},  // 7C 87 01 3A 64 8A
    {0xe8, 0x79, 0x4f, 0xb1, 0x4c, 0x63},  // E8 79 4F B1 4C 63
    {0x9f, 0x97, 0xc1, 0x82, 0x58, 0x5b},  // 9F 97 C1 82 58 5B
    {0xec, 0x07, 0x0a, 0x52, 0xe5, 0x39},  // EC 07 0A 52 E5 39
    {0xc2, 0x29, 0xce, 0x51, 0x23, 0xd5},  // C2 29 CE 51 23 D5
    {0xe4, 0x95, 0xd6, 0xe6, 0x9d, 0x9c},  // E4 95 D6 E6 9D 9C
    {0x26, 0xbf, 0x1a, 0x68, 0xb0, 0x0f},  // 26 BF 1A 68 B0 0F
    {0xb1, 0xd3, 0xbc, 0x5a, 0x7c, 0xca},  // B1 D3 BC 5A 7C CA
    {0x73, 0x4e, 0xbe, 0x50, 0x4c, 0xe8},  // 73 4E BE 50 4C E8
    {0x97, 0x4a, 0x36, 0xe2, 0xb1, 0xba},  // 97 4A 36 E2 B1 BA
    {0xc1, 0x97, 0xae, 0x6d, 0x69, 0x90},  // C1 97 AE 6D 69 90
    {0x4d, 0x80, 0xa1, 0x06, 0x49, 0xdf},  // 4D 80 A1 06 49 DF
    {0x03, 0x7f, 0x64, 0xf4, 0x70, 0xad},  // 03 7F 64 F4 70 AD
    {0xc9, 0xcd, 0x8d, 0x7c, 0x65, 0xe5},  // C9 CD 8D 7C 65 E5
    {0xb7, 0x0b, 0x19, 0x57, 0xfe, 0x71},  // B7 0B 19 57 FE 71
    {0xce, 0x77, 0x12, 0xc5, 0x07, 0x1d},  // CE 77 12 C5 07 1D
    {0xc0, 0xad, 0x1b, 0x72, 0x92, 0x1a},  // C0 AD 1B 72 92 1A
    {0x45, 0xfe, 0xe0, 0x9c, 0x1d, 0x06},  // 45 FE E0 9C 1D 06
    {0xe5, 0x92, 0xed, 0x47, 0x8e, 0x59},  // E5 92 ED 47 8E 59
    {0xf3, 0xc1, 0xf1, 0xdb, 0x1d, 0x83},  // F3 C1 F1 DB 1D 83
    {0x70, 0x4a, 0x81, 0xdd, 0xac, 0xed},  // 70 4A 81 DD AC ED
    {0x89, 0xe0, 0x0b, 0xc4, 0x44, 0xef},  // 89 E0 0B C4 44 EF
    {0xaf, 0xaa, 0xfc, 0xc4, 0x0d, 0xec},  // AF AA FC C4 0D EC
    {0xec, 0xc5, 0x8c, 0x5d, 0x34, 0xca},  // EC C5 8C 5D 34 CA
    {0x57, 0xd8, 0x37, 0x54, 0x71, 0x1d},  // 57 D8 37 54 71 1D
    {0xd0, 0xdd, 0xdf, 0x29, 0x33, 0xec},  // D0 DD DF 29 33 EC
    {0x24, 0x0f, 0x0b, 0xb8, 0x46, 0x81},  // 24 0F 0B B8 46 81
    {0x9e, 0x71, 0x68, 0x06, 0x49, 0x93},  // 9E 71 68 06 49 93
    {0x2f, 0x8a, 0x86, 0x7b, 0x06, 0xb4},  // 2F 8A 86 7B 06 B4
    {0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5},  // A0 A1 A2 A3 A4 A5
    {0x75, 0x5d, 0x49, 0x19, 0x1a, 0x78},  // 75 5D 49 19 1A 78
    {0xda, 0xc7, 0xe0, 0xcb, 0xa8, 0xfd},  // DA C7 E0 CB A8 FD
    {0x68, 0xd3, 0x26, 0x3a, 0x8c, 0xd6},  // 68 D3 26 3A 8C D6
    {0x86, 0x5b, 0x64, 0x72, 0xb1, 0xc0},  // 86 5B 64 72 B1 C0
    {0x08, 0x60, 0x31, 0x8a, 0x3a, 0x89},  // 08 60 31 8A 3A 89
    {0x19, 0x27, 0xa4, 0x5a, 0x83, 0xd3},  // 19 27 A4 5A 83 D3
    {0xb2, 0xfe, 0x3b, 0x28, 0x75, 0xa6},  // B2 FE 3B 28 75 A6
    {0x61, 0x30, 0xdf, 0xa5, 0x78, 0xa0},  // 61 30 DF A5 78 A0
    {0x2a, 0xff, 0xd6, 0xf8, 0x8b, 0x97},  // 2A FF D6 F8 8B 97
    {0xb1, 0x6b, 0x2e, 0x57, 0x32, 0x35},  // B1 6B 2E 57 32 35
    {0xa9, 0xf3, 0xf2, 0x89, 0xb7, 0x0c},  // A9 F3 F2 89 B7 0C
    {0x42, 0xef, 0x7b, 0xf5, 0x72, 0xab},  // 42 EF 7B F5 72 AB
    {0xdb, 0x68, 0x19, 0x55, 0x8a, 0x25},  // DB 68 19 55 8A 25
    {0x27, 0x4e, 0x61, 0x01, 0xfc, 0x5e},  // 27 4E 61 01 FC 5E
    {0x0c, 0x84, 0xc0, 0x8e, 0x44, 0x59},  // 0C 84 C0 8E 44 59
    {0x6e, 0x92, 0x22, 0x82, 0xff, 0x1e},  // 6E 92 22 82 FF 1E
    {0x75, 0x42, 0x6f, 0x86, 0x76, 0xe5},  // 75 42 6F 86 76 E5
    {0x56, 0x9c, 0xf0, 0x0a, 0x66, 0x9a},  // 56 9C F0 0A 66 9A
    {0xa0, 0x60, 0xa5, 0x04, 0x13, 0x6e},  // A0 60 A5 04 13 6E
    {0x20, 0xf1, 0xa4, 0x5a, 0xed, 0x0e},  // 20 F1 A4 5A ED 0E
    {0xfc, 0xb3, 0x1c, 0x62, 0x3d, 0x7e},  // FC B3 1C 62 3D 7E
    {0x39, 0x70, 0xd8, 0xee, 0x96, 0x48},  // 39 70 D8 EE 96 48
    {0x00, 0xe0, 0x38, 0x46, 0xde, 0xaf},  // 00 E0 38 46 DE AF
    {0x3f, 0xfb, 0xcc, 0xc7, 0xbe, 0xb8},  // 3F FB CC C7 BE B8
    {0x05, 0x91, 0x12, 0x5b, 0x10, 0xb5},  // 05 91 12 5B 10 B5
    {0x11, 0x2f, 0x64, 0xbf, 0x81, 0xe4},  // 11 2F 64 BF 81 E4
    {0xd3, 0x44, 0x50, 0xf0, 0xae, 0x77},  // D3 44 50 F0 AE 77
    {0x36, 0x60, 0x6f, 0xc0, 0x87, 0xa9},  // 36 60 6F C0 87 A9
    {0x7e, 0xf2, 0x4d, 0x82, 0x41, 0x4b},  // 7E F2 4D 82 41 4B
    {0xbe, 0x49, 0xc2, 0x61, 0x6f, 0xa4},  // BE 49 C2 61 6F A4
    {0xd9, 0xa5, 0xf2, 0x29, 0x0c, 0x6d},  // D9 A5 F2 29 0C 6D
    {0xfa, 0xbd, 0xb9, 0x80, 0xed, 0x19},  // FA BD B9 80 ED 19
    {0xd7, 0x17, 0xfb, 0xca, 0x1c, 0x14},  // D7 17 FB CA 1C 14
    {0xc6, 0xe7, 0x22, 0xf6, 0xe8, 0x6a},  // C6 E7 22 F6 E8 6A
    {0xe9, 0x8f, 0xdd, 0x37, 0xf9, 0x37},  // E9 8F DD 37 F9 37
    {0xe9, 0x09, 0x28, 0x3b, 0x06, 0x1e},  // E9 09 28 3B 06 1E
    {0x99, 0x47, 0xf9, 0x16, 0x4c, 0xe1},  // 99 47 F9 16 4C E1
    {0x80, 0x83, 0x42, 0xa4, 0xc7, 0x28},  // 80 83 42 A4 C7 28
    {0xab, 0xcc, 0x12, 0x76, 0xfc, 0xb0},  // AB CC 12 76 FC B0
    {0xaa, 0xba, 0xff, 0xcc, 0x76, 0x12},  // AA BA FF CC 76 12
    {0x26, 0x10, 0x7e, 0x70, 0x06, 0xa0},  // 26 10 7E 70 06 A0
    {0x17, 0xd0, 0x71, 0x40, 0x3c, 0x20},  // 17 D0 71 40 3C 20
    {0x9d, 0xb5, 0x79, 0xda, 0x12, 0x69},  // 9D B5 79 DA 12 69
    {0x9d, 0xb5, 0x99, 0xda, 0x12, 0x99},  // 9D B5 99 DA 12 99
    {0xac, 0x30, 0x59, 0x58, 0x25, 0x1e},  // AC 30 59 58 25 1E
    {0x6a, 0x69, 0xc4, 0x01, 0x77, 0xe6},  // 6A 69 C4 01 77 E6
    {0xf0, 0xf7, 0x92, 0x2e, 0xf5, 0x0f},  // F0 F7 92 2E F5 0F
    {0x72, 0xde, 0xca, 0x9e, 0xc1, 0xbc}   // 72 DE CA 9E C1 BC  



};

/*
 * Initialize.
 */
void setup() {
    Serial.begin(9600);         // Initialize serial communications with the PC
    while (!Serial);            // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
    SPI.begin();                // Init SPI bus
    mfrc522.PCD_Init();         // Init MFRC522 card
    Serial.println(F("Try the most used default keys to print block 0 of a MIFARE PICC."));
}

/*
 * Helper routine to dump a byte array as hex values to Serial.
 */
void dump_byte_array(byte *buffer, byte bufferSize) {
    for (byte i = 0; i < bufferSize; i++) {
        Serial.print(buffer[i] < 0x10 ? " 0" : " ");
        Serial.print(buffer[i], HEX);
    }
}

/*
 * Try using the PICC (the tag/card) with the given key to access block 0.
 * On success, it will show the key details, and dump the block data on Serial.
 *
 * @return true when the given key worked, false otherwise.
 */
bool try_key(MFRC522::MIFARE_Key *key)
{
    bool result = false;
    byte buffer[18];
    byte block = 0;
    MFRC522::StatusCode status;

    // Serial.println(F("Authenticating using key A..."));
    status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, key, &(mfrc522.uid));
    if (status != MFRC522::STATUS_OK) {
        // Serial.print(F("PCD_Authenticate() failed: "));
        // Serial.println(mfrc522.GetStatusCodeName(status));
        return false;
    }

    // Read block
    byte byteCount = sizeof(buffer);
    status = mfrc522.MIFARE_Read(block, buffer, &byteCount);
    if (status != MFRC522::STATUS_OK) {
        // Serial.print(F("MIFARE_Read() failed: "));
        // Serial.println(mfrc522.GetStatusCodeName(status));
    }
    else {
        // Successful read
        result = true;
        Serial.print(F("Success with key:"));
        dump_byte_array((*key).keyByte, MFRC522::MF_KEY_SIZE);
        Serial.println();
        // Dump block data
        Serial.print(F("Block ")); Serial.print(block); Serial.print(F(":"));
        dump_byte_array(buffer, 16);
        Serial.println();
    }
    Serial.println();

    mfrc522.PICC_HaltA();       // Halt PICC
    mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD
    return result;
}

/*
 * Main loop.
 */
void loop() {
    // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
    if ( ! mfrc522.PICC_IsNewCardPresent())
        return;

    // Select one of the cards
    if ( ! mfrc522.PICC_ReadCardSerial())
        return;

    // Show some details of the PICC (that is: the tag/card)
    Serial.print(F("Card UID:"));
    dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
    Serial.println();
    Serial.print(F("PICC type: "));
    MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
    Serial.println(mfrc522.PICC_GetTypeName(piccType));
    
    // Try the known default keys
    MFRC522::MIFARE_Key key;
    for (byte k = 0; k < NR_KNOWN_KEYS; k++) {
        // Copy the known key into the MIFARE_Key structure
        for (byte i = 0; i < MFRC522::MF_KEY_SIZE; i++) {
            key.keyByte[i] = knownKeys[k][i];
        }
        // Try the key
        if (try_key(&key)) {
            // Found and reported on the key and block,
            // no need to try other keys for this PICC
            break;
        }
        
        // http://arduino.stackexchange.com/a/14316
        if ( ! mfrc522.PICC_IsNewCardPresent())
            break;
        if ( ! mfrc522.PICC_ReadCardSerial())
            break;
    }
}
